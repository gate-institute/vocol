<% include header %>
  <div style="margin-top: 3% !important;"></div>
  <div class="ui grid">
    <div class="ui container">
      <div id="infoTabs" style="overflow-x: hidden; overflow-y: auto">
        <div id="externalInfo"></div>
        <ul id="viewList" class="nav nav-tabs" style="display: none">
          <li class="active"><a class="nav-link active" data-toggle="tab" id="documentationTab" href="#documentation">Documentation</a></li>
          <li><a class="nav-link" data-toggle="tab" id="sourceCodeTab" href="#sourceCode">Source</a></li>
          <li><a class="nav-link" data-toggle="tab" id="graphTab" href="#showGraph">Graphical depiction</a></li>
        </ul>
        <div class="tab-content">
          <div class="tab-pane active" id="documentation" role="tabpanel">
            <div id="infoDetails">
              <h2 id="conceptHead" style="display: none; margin-top:9px"> Details: </h2>
              <div id="detailTable" style="padding-bottom:20px"></div>
              <div id="domainTable" style="display: none; padding-bottom:20px"></div>
              <div id="rangeTable" style="display: none; padding-bottom:20px"></div>
              <div id="domainPropertyTable" style="display: none; padding-bottom:20px"></div>
              <div id="rangePropertyTable" style="display: none; padding-bottom:20px"></div>
              <div id="instancesTable" style="display: none"></div>
              <h4 id="instanceHead" style="display: none; margin-top:9px"></h4>
              <div id="instanceDetailsTable" style="display: none"></div>
            </div>
          </div>
          <div class="tab-pane" class="tabContent" id="sourceCode" role="tabpanel">
            <div class="ui buttons">
              <button class="ui red basic button" id="turtleCodeBnt" value="text/turtle">Turtle</button>
              <button class="ui olive basic button" id="ntriplesCodeBnt" value="text/ntriples">N-Triples</button>
              <button class="ui teal basic button" id="ldJsonCodeBnt" value="application/ld+json">JSON-LD</button>
              <button class="ui blue basic button" id="rdfxmlCodeBnt" value="application/rdf+xml">RDF/XML</button>
            </div>
            <div id="yasqe" style="overflow: hidden"></div>
            <div id="yasqe" style="overflow: hidden;display: none"></div>
            <div id="xmlCodeDiv" style="display: none">
              <pre><code  id="xmlCode" ></code></pre>
            </div>
            <div id="jsonCodeDiv" style="display: none"><pre><code  id="jsonCode" ></code></pre></div>

          </div>
          <div class="tab-pane" class="tabContent" id="showGraph" role="tabpanel">
            <div id="mynetwork"></div>
            <p id="selection"></p>
          </div>
        </div>
      </div>
    </div>
  </div>
  <% include footer %>
    <!-- End of expressJS coding-->

    <!-- Start of javascript coding-->
    <script>
      // get all the data from route.tree.js
      var RDFSData = <%- JSON.stringify(data) %>;
      var SKOSData = <%- JSON.stringify(SKOSData) %>;
      var mixRDFConcepts = <%- JSON.stringify(allRDFObjects) %>;
      var mixSKOSConcepts = <%- JSON.stringify(allSKOSObjects) %>;
      var RDFObjPlusURI = <%- JSON.stringify(RDFObjectsPlusURI) %>;
      var SKOSObjPlusURI = <%- JSON.stringify(SKOSObjectsPlusURI) %>;
      var individiualsData = <%- JSON.stringify(OWLIndividuals) %>;
      // store the selected concept
      var currentSelectedConcept = <%- JSON.stringify(referenceItem) %>;
      // store current elements in the tree, it has RDFS concepts initially
      var currentTreeData = RDFSData;
      // store which file is selected from the dropdown menuSize
      var currentSelectedFile = "ALL Files";
      // store SKOS URI of the selected node
      var currentSelectedSKOSURI = "";
      // store currentSelectedIndividual URI of the selected node
      var currentSelectedIndividualURI = "";

      // change the title of the page with currentSelectedConcept
      $(document).attr("title", currentSelectedConcept);

      // make unique concept in  tree
      function uniqueArray(array) {
        var a = array.concat();
        for (var i = 0; i < a.length; i++) {
          for (var j = i + 1; j < a.length; j++) {
            if (a[i].text === a[j].text) {
              a.splice(j--, 1);
            }
          }
        }
        return a;
      }

      // show info. for external Concepts and thier instaces
      function showExternalInfo(str) {
        var ExteralURI = getExternalURI(str);
        // check if URI for external concept is exist
        if (ExteralURI) {
          //scrollTop if class clicked from instanceDetailsTable
          $("#infoTabs").animate({
            scrollTop: 0
          }, "fast");
          $("#instanceHead").hide();
          $("#instanceDetailsTable").hide();
          $("#instancesTable").hide();
          var externalURITable = '<div class="ui attached error message">' +
            '<div class="header"> This concept is external </div></div>';
          // check if it URL ends with "/"
          if (ExteralURI[ExteralURI.length - 1] === ('/')) {
            var link = '<a href=' + ExteralURI.slice(0, -1) + '>' + ExteralURI.slice(0, -1) + '</a>';
          } else {
            var link = '<a href=' + ExteralURI + '>' + ExteralURI + '</a>';
          }
          //show info. about the external concept
          externalURITable += '<div class="ui bottom attached fluid segment"> For more details, please click the following link: <br/><br/> ' + link;
          externalURITable += '</div>';
          $('#infoTabs').show();
          $('a[href="#documentation"]').click();
          $('#sourceCodeTab').hide();
          $('#graphTab').hide();
          $('#infoDetails').show();
          $("#domainTable").hide();
          $("#domainPropertyTable").hide();
          $("#rangePropertyTable").hide();
          $("#rangeTable").hide();
          $("#instancesTable").hide();
          $("#instanceHead").hide();
          $("#instanceDetailsTable").hide();
          $("#conceptHead").show();
          if (ExteralURI[ExteralURI.length - 1] === ('/')) {
            var str = ExteralURI.slice(0, -1);
            $("#conceptHead").html('<p>  Details: <code>' + trimHash(trimSlash(str)) + '</code></p>');
          } else {
            $("#conceptHead").html('<p>  Details: <code>' + trimHash(replaceWithRDFType(trimSlash(ExteralURI))) + '</code></p>');
          }
          $('#detailTable').html(externalURITable);
          $('#detailTable').transition('shake')
          var endpoint = "./fuseki/dataset/sparql?query=";
          var querystring = 'SELECT  ?s WHERE { ?s  a <' + encodeURIComponent(ExteralURI) + '> }';
          $.ajax({
            type: 'GET',
            url: endpoint + querystring,
            headers: {
              Accept: 'application/sparql-results+json;charset=UTF-8'
            },
            success: function(data, textStatus, jqXHR) {
              var instances = data.results.bindings;
              if (instances[0] != null) {
                var instancesTable = '<table class="ui pink table" style="table-layout:fixed;>' +
                  '<colgroup> <col class="col-md-4"> </colgroup>' +
                  '<tr>' +
                  '<th>Individuals</th>' +
                  '</tr>';
                for (var i = 0; i < instances.length; i++) {
                  var instanceURI = instances[i]["s"].value;
                  var key1 = trimHash(trimSlash(instanceURI));
                  key1 = '<a href="./' + key1 + '">' + key1 + '</a>';
                  instancesTable += '<tr>    <td>' + key1 + '</td>  </tr>';
                }
                instancesTable += '</table> ';
                $("#instancesTable").show();
                $("#instancesTable").html(instancesTable);
              } else {
                $("#instancesTable").hide();
                $("#instanceHead").hide();
                $("#instanceDetailsTable").hide();
              }
              if (instances[0] != null) {
                var instancesTable = '<table class="ui red table" style="table-layout:fixed;>' +
                  '<colgroup> <col class="col-md-4"> </colgroup>' +
                  '<tr>' +
                  '<th>Individuals</th>' +
                  '</tr>';
                for (var i = 0; i < instances.length; i++) {
                  var instanceURI = instances[i]["s"].value;
                  var key1 = trimHash(trimSlash(instances[i]["s"].value));
                  key1 = '<a href="./' + key1 + '">' + key1 + '</a>';

                  instancesTable += '<tr>    <td>' + key1 + '</td>  </tr>';
                }
                instancesTable += '</table> ';
                $("#instancesTable").show();
                $("#instancesTable").html(instancesTable);
              } else {
                $("#instancesTable").html("");
                $("#instancesTable").hide();
                $("#instanceHead").hide();
                $("#instanceDetailsTable").hide();
              }
            }
          });
        } else {
          infoTabs
          $('#infoTabs').hide();
          $('#infoDetails').hide();
          $("#externalInfo").show();
          $("#externalInfo").html('<p > Concept is External still has no URI</p>');
        }
      }

      // Get the word after slash char of a string
      function trimSlash(str) {
        if (str.includes("/")) {
          var n = str.split("/").pop(-1);;
          return n;
        } else {
          return str;
        }
      }

      // Get the word after hash char of a string
      function trimHash(str) {
        if (str.includes("#")) {
          var n = str.split('#');;
          var p = n[n.length - 1];
          return p;
        } else {
          return str;
        }
      }

      //check if concept is OWLIndividiual
      function isOWLIndividiual(str) {
        if (individiualsData.find(x => x.subject === str)) {
          return true;
        } else
          return false;
      }

      // Customization of the RDF type to show as in standards
      function replaceWithRDFType(str) {
        if (str.includes("22-rdf-syntax-ns")) {
          return "rdf:" + trimHash(str);
        } else if (str.includes('rdf-schema'))
          return "rdfs:" + trimHash(str);
        else if (str.includes('owl'))
          return "owl:" + trimHash(str);
        else if (str.includes('core#Concept') || str.includes('narrower') || str.includes('broader'))
          return "skos:" + trimHash(str);
        else
          return str;
      }

      //check if concept is in our ontology or external
      function isSKOSConcept(str) {
        if (SKOSData.find(x => x.child === str) || SKOSData.find(x => x.parent === str) || SKOSData.find(x => x.concept === str)) {
          return true;
        }
        return false;
      }

      //check if concept is in our ontology or external
      function isConceptInside(str) {
        if (conceptIsSKOS) {
          if (SKOSData.find(x => x.child === str) || SKOSData.find(x => x.parent === str) || SKOSData.find(x => x.concept === str))
            return true;
        } else if (RDFSData.find(x => x.concept === str))
          return true;
        //else
        return false;
      }


      // get externalURI
      function getExternalURI(str) {
        var array = [];
        if (isSKOSConcept(currentSelectedConcept)) {
          array = SKOSObjPlusURI;
        } else {
          array = RDFObjPlusURI;
        }
        for (var i = 0; i < array.length; i++) {
          if (str === array[i].object)
            return array[i].URI;
        }
        return;
      }

      // show info. details of clicked instance
      function showInstanceDetails(instanceURI) {
        var endpoint = "./fuseki/dataset/sparql?query=";
        var querystring = 'SELECT  ?p ?o WHERE {  <' + encodeURIComponent(instanceURI) + '> ?p ?o }';
        $.ajax({
          type: 'GET',
          url: endpoint + querystring,
          headers: {
            Accept: 'application/sparql-results+json;charset=UTF-8'
          },
          success: function(data, textStatus, jqXHR) {
            var instances = data.results.bindings;
            if (instances[0] != null) {
              var instancesDetailsTable = '<table class="ui blue celled table" style="table-layout:fixed;>' +
                '<thead><tr class="info">' +
                '<th>Predicate</th>' +
                '<th>Object</th>' +
                '</tr></thead>';
              for (var i = 0; i < instances.length; i++) {
                var key1 = instances[i]['p'].value;
                var key2 = instances[i]['o'].value;
                var key2URI = key2;
                var key3 = instances[i]['o']['xml:lang'];
                var key4 = instances[i]['o']['type'];

                //check if object is uri end with "/"
                if ((key2.includes("http://") || key2.includes("https://")) && key4 === "literal") {
                  if (key2[key2.length - 1] === ('/'))
                    key2 = key2.slice(0, -1);
                  key2 = '<a href=' + key2 + '>' + key2 + '</a>';
                  key1 = trimHash(replaceWithRDFType(trimSlash(instances[i]['p'].value)));
                } else {
                  key1 = trimHash(replaceWithRDFType(trimSlash(instances[i]['p'].value)));
                  key2 = trimHash(replaceWithRDFType(trimSlash(instances[i]['o'].value)));
                }

                if (key1.includes("broader") || key1.includes("narrower")) {
                  key2 = '<a href="./' + key2 + '">' + key2 + '</a>';
                }
                if (!isConceptInside(key2) && !isOWLIndividiual(key2) && !key1.includes("label") && key4 === "uri") {
                  key2 = '<a href="./' + key2 + '">' + key2 + '</a>';
                }
                if (isOWLIndividiual(key2) && !key1.includes("label") && key4 === "uri") {
                  key2 = '<a href="./' + key2 + '">' + key2 + '</a>';
                }
                if (isConceptInside(key2) && !key1.includes("label") && key4 === "uri") {
                  key2 = '<a href="./' + key2 + '">' + key2 + '</a>';
                }
                if (key3 && key4 === "literal") {
                  key2 = key2 + '@' + key3;
                }
                instancesDetailsTable += '<tr><td>' + key1 + '</td>    <td>' + key2 + '</td>  </tr>';
              }
              instancesDetailsTable += '</table> ';
              $("#instanceHead").show();
              $("#instanceHead").html('<h3> Individual: <code>' + trimHash(replaceWithRDFType(trimSlash(instanceURI))) + '</code></h3>');
              $("#instanceDetailsTable").show();
              $("#instanceDetailsTable").html(instancesDetailsTable);
              document.getElementById("instanceHead").scrollIntoView()

            } else {
              $("#instanceHead").hide();
              $("#instanceDetailsTable").hide();
            }
          }
        });
      }


      // To display instances of  the selected node
      function showInstances(item) {
        var conceptURI;
        var isURIExist = false;
        var data = [];
        if (isSKOSConcept(currentSelectedConcept))
          data = SKOSData;
        else
          data = RDFSData;

        if (item) {
          for (var i = 0; i < data.length; i++) {
            if (item.toLowerCase() === data[i].concept.toLowerCase()) {
              conceptURI = data[i].URI;
              isURIExist = true;
              break;
            }
          }
          if (isURIExist) {
            var endpoint = "./fuseki/dataset/sparql?query=";
            var querystring = 'SELECT  ?s WHERE { ?s  a <' + encodeURIComponent(conceptURI) + '> }';
            $.ajax({
              type: 'GET',
              url: endpoint + querystring,
              headers: {
                Accept: 'application/sparql-results+json;charset=UTF-8'
              },
              success: function(data, textStatus, jqXHR) {
                var instances = data.results.bindings;
                if (instances[0] != null) {
                  var instancesTable = '<table class="ui red table" style="table-layout:fixed;>' +
                    '<colgroup> <col class="col-md-4"> </colgroup>' +
                    '<tr>' +
                    '<th>Individuals</th>' +
                    '</tr>';
                  for (var i = 0; i < instances.length; i++) {
                    var instanceURI = instances[i]["s"].value;
                    var key1 = trimHash(trimSlash(instances[i]["s"].value));
                    key1 = '<a href="./' + key1 + '">' + key1 + '</a>';

                    instancesTable += '<tr>    <td>' + key1 + '</td>  </tr>';
                  }
                  instancesTable += '</table> ';
                  $("#instancesTable").show();
                  $("#instancesTable").html(instancesTable);
                } else {
                  $("#instancesTable").html("");
                  $("#instancesTable").hide();
                  $("#instanceHead").hide();
                  $("#instanceDetailsTable").hide();
                }
              }
            });
          }
        }
      }

      var acceptHeader4SourceCode = "text/turtle";
      // set Accept Header based on clicked button to show the reference Code
      $(function() {
        $(".ui.button").click(function(event) {
          event.preventDefault();
          acceptHeader4SourceCode = this.value;
          if (conceptIsOWLIndividual)
            showTurtleSource(currentSelectedIndividualURI, "Individuals");
          else if (conceptIsSKOS) {
            if (justOneTimeExectuted)
              showTurtleSource(currentSelectedSKOSURI, "SKOS", "queryAsObject");
            else
              showTurtleSource(currentSelectedSKOSURI, "SKOS");
          } else {
            showTurtleSource(currentSelectedConcept);
          }
        });
      });

      // Conversion from xml to string
      function xml_to_string(xml_node) {
        if (xml_node.xml)
          return xml_node.xml;
        else if (XMLSerializer) {
          var xml_serializer = new XMLSerializer();
          return xml_serializer.serializeToString(xml_node);
        } else {
          alert("ERROR: Extremely old browser");
          return "";
        }
      }
      // To display Turtle source for the selected node
      function showTurtleSource(item, view, anotherQuery) {
        var conceptURI;
        var isURIExist = false;
        if (conceptIsSKOS) {
          for (var i = 0; i < SKOSData.length; i++) {
            if (item.toLowerCase() === SKOSData[i].concept.toLowerCase()) {
              conceptURI = SKOSData[i].URI;
              isURIExist = true;
              break;
            }
          }
        } else if (conceptIsOWLIndividual) {
          for (var i = 0; i < individiualsData.length; i++) {
            if (item.toLowerCase() === individiualsData[i].subject.toLowerCase()) {
              conceptURI = individiualsData[i].subjectURI;
              currentSelectedIndividualURI = individiualsData[i].subjectURI;
              isURIExist = true;
              break;
            }
          }
        } else {
          if (item) {
            for (var i = 0; i < RDFSData.length; i++) {
              if (item.toLowerCase() === RDFSData[i].concept.toLowerCase()) {
                conceptURI = RDFSData[i].URI;
                isURIExist = true;
                break;
              }
            }
          } else if (currentSelectedConcept) {
            for (var i = 0; i < RDFSData.length; i++) {
              if (currentSelectedConcept.toLowerCase() === RDFSData[i].concept.toLowerCase()) {
                conceptURI = RDFSData[i].URI;
                isURIExist = true;
                break;
              }
            }
          } else
            isURIExist = false;
        }
        if (isURIExist) {
          var endpoint = "./fuseki/dataset/sparql?query=";
          if (!anotherQuery)
            var querystring = 'CONSTRUCT{<' + encodeURIComponent(conceptURI) + '> ?p ?o .}WHERE {<' + encodeURIComponent(conceptURI) + '> ?p ?o .}';
          else
            var querystring = 'CONSTRUCT{ ?s ?p <' + encodeURIComponent(conceptURI) + '> .}WHERE { ?s ?p <' + encodeURIComponent(conceptURI) + '> .}';
          $('div.yasqe').empty();
          $.ajax({
            type: 'GET',
            url: endpoint + querystring,
            headers: {
              Accept: acceptHeader4SourceCode
            },
            success: function(data, textStatus, jqXHR) {
              $('#sourceCodeTab').show();
              $('div.yasqe').remove();
              var config = {
                createShareLink: false,
                readOnly: true,
                syntaxErrorCheck: false,
                lineNumbers: false
              };
              if (acceptHeader4SourceCode == "text/turtle" || acceptHeader4SourceCode == "text/ntriples") {
                $("#jsonCodeDiv").hide();
                $("#xmlCodeDiv").hide();
                $("#yasqe").show();
                // use yasqe library to display turtle format
                var yasqe = YASQE(document.getElementById("yasqe"), config);
                $("div.CodeMirror-gutters").remove();
                $("div.yasqe_buttons").remove();
                yasqe.setValue(data);
                $("div.yasqe").transition('pulse');
              } else {
                hljs.initHighlightingOnLoad();
                if (acceptHeader4SourceCode == "application/ld+json") {
                  $("#jsonCodeDiv").show();
                  $("#xmlCodeDiv").hide();
                  $("#yasqe").hide();
                  $("#jsonCode").html(JSON.stringify(data));
                  $("jsonCode").transition('pulse');
                } else {
                  $("#xmlCodeDiv").show();
                  $("#jsonCodeDiv").hide();
                  $("#yasqe").hide();
                  // set xml code to a web element
                  $("#xmlCode").text(xml_to_string(data));
                  $("#xmlCode").transition('pulse');

                }
              }
            },
            error: function(e) {
              console.log(e);
            }
          });

        }
      }

      // call to showTurtleSource to display the turtle format
      // when checkbox is clicked
      $("#sourceCodeTab").on('click', function() {
        if (isSKOSConcept(currentSelectedConcept))
          showTurtleSource(currentSelectedConcept, "SKOS");
        else
          showTurtleSource(currentSelectedConcept);
      });


                  //check if concept used either as domain or range by other conceptsget
                  function getValuesUseditAsProperty(conceptURI, type) {
                    var hasdomainPropertyValues = false;
                    var hasRangePropertyValues = false;

                    // make both rangePropertyTable and domainPropertyTable  empty
                    $("#rangePropertyTable").hide();
                    $("#domainPropertyTable").hide();
                    if (type === "range") {
                      var propertyType = "rdfs:range";
                    } else {
                      var propertyType = "rdfs:domain";
                    }
                    var endpoint = "./fuseki/dataset/sparql?query=";
                    var querystring = 'PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>' +
                      'SELECT  ?s ?property ?comment ' +
                      'WHERE {' +
                      ' ?s ' + propertyType + ' <' + conceptURI + '>.' +
                      '?s ' + propertyType + '?property.' +
                      'OPTIONAL{?s rdfs:comment ?comment.}}';
                    $.ajax({
                      type: 'GET',
                      url: endpoint + encodeURIComponent(querystring),
                      'async': true,
                      headers: {
                        Accept: 'application/sparql-results+json;charset=UTF-8'
                      },
                      success: function(data, textStatus, jqXHR) {
                        var result = data.results.bindings;
                        hasdomainPropertyValues = false;
                        hasRangePropertyValues = false;

                        if (result[0] != null) {
                          var rangePropertyTable = '<table class="ui yellow celled table" style="table-layout:fixed;" >' +
                            '<thead>' +
                            '<colgroup> <col class="col-md-2"><col class="col-md-2"><col class="col-md-2"> </colgroup>' +
                            '<tr>' +
                            '<th colspan="3">Terms use it as range</th></thead>' +
                            '<tbody></tr><tr><th>Property</th><th>On Types</th><th>Description</th></tr>';

                          var domainPropertyTable = '<table class="ui brown celled striped table"style="table-layout:fixed;" >' +
                            '<thead>' +
                            '<colgroup> <col class="col-md-2"><col class="col-md-2"><col class="col-md-2"> </colgroup>' +
                            '<tr>' +
                            '<th colspan="3">Terms use it as domain</th></thead>' +
                            '<tbody></tr><tr><th>Property</th><th>Expected Type</th><th>Description</th></tr>';
                          var perviousKey1DomainProperty = "",
                            perviousKey2DomainProperty = "";
                          if (type === 'domain') {
                            var domianPropertyResult = result;
                            if (domianPropertyResult) {
                              hasdomainPropertyValues = true;
                              for (var i = 0; i < domianPropertyResult.length; i++) {
                                var key1 = trimHash(replaceWithRDFType(trimSlash(domianPropertyResult[i]['s'].value)));
                                var key2 = trimHash(replaceWithRDFType(trimSlash(domianPropertyResult[i]['property'].value)));
                                var key3 = "";
                                if (domianPropertyResult[i].hasOwnProperty("comment"))
                                  key3 = domianPropertyResult[i]['comment'].value;
                                var key4 = "";
                                if (domianPropertyResult[i]['comment'].hasOwnProperty("xml:lang"))
                                  key4 = domianPropertyResult[i]['comment']['xml:lang'];

                                var key5 = domianPropertyResult[i]['comment']['type'];
                                if (isConceptInside(key1) && domianPropertyResult[i]['s'].type === "uri")
                                  key1 = '<a href="#" onmousedown="getConceptInfo(&quot;' + key1 + '&quot;); return false; ">' + key1 + '</a>';
                                if (isConceptInside(key2) && domianPropertyResult[i]['property'].type === "uri")
                                  key2 = '<a href="#" onmousedown="getConceptInfo(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
                                // check if rows share same values of subject and property, then combine the last comment in the same table cell
                                if (perviousKey1DomainProperty === key1 && perviousKey2DomainProperty === key2 && key4 && key5 === "literal") {
                                  domainPropertyTable = domainPropertyTable.substring(0, domainPropertyTable.lastIndexOf('</td> </tr>'))
                                  domainPropertyTable += '<br/><br/>' + key3 + '@' + key4 + '</td> </tr>';
                                } else if (perviousKey1DomainProperty === key1 && perviousKey2DomainProperty === key2) {
                                  domainPropertyTable = domainPropertyTable.substring(0, domainPropertyTable.lastIndexOf('</td> </tr>'))
                                  domainPropertyTable += '<br/><br/>' + key3 + '</td> </tr>';
                                } else if (key4 && key5 === "literal")
                                  domainPropertyTable += '<tr><td style="vertical-align:middle;">' + key1 + '</td>    <td style="vertical-align:middle; text-align: center;">' + key2 + '</td>   <td>' + key3 + '@' + key4 + '</td> </tr>';
                                else
                                  domainPropertyTable += '<tr><td style="vertical-align:middle;">' + key1 + '</td>    <td style="vertical-align:middle; text-align: center;">' + key2 + '</td>   <td>' + key3 + '</td> </tr>';
                                //save pervious values of key1 and key2
                                perviousKey1DomainProperty = key1;
                                perviousKey2DomainProperty = key2;

                              }
                            }
                          } else if (type === 'range') {
                            var rangePropertyResult = result;
                            var perviousKey1RangeProperty = "",
                              perviousKey2RangeProperty = "";
                            if (rangePropertyResult) {
                              hasRangePropertyValues = true;
                              for (var i = 0; i < rangePropertyResult.length; i++) {
                                var key1 = trimHash(replaceWithRDFType(trimSlash(rangePropertyResult[i]['s'].value)));
                                var key2 = trimHash(replaceWithRDFType(trimSlash(rangePropertyResult[i]['property'].value)));
                                var key3 = "";
                                if (rangePropertyResult[i].hasOwnProperty("comment"))
                                  key3 = rangePropertyResult[i]['comment'].value;
                                var key4 = "";
                                if (rangePropertyResult[i]['comment'].hasOwnProperty("xml:lang"))
                                  key4 = rangePropertyResult[i]['comment']['xml:lang'];
                                var key5 = rangePropertyResult[i]['comment']['type'];

                                if (isConceptInside(key1) && rangePropertyResult[i]['s'].type === "uri")
                                  key1 = '<a href="#" onmousedown="getConceptInfo(&quot;' + key1 + '&quot;); return false; ">' + key1 + '</a>';
                                if (isConceptInside(key2) && rangePropertyResult[i]['property'].type === "uri")
                                  key2 = '<a href="#" onmousedown="getConceptInfo(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
                                // check if rows share same values of subject and property, then combine the last comment in the same table cell
                                if (perviousKey1RangeProperty === key1 && perviousKey2RangeProperty === key2 && key4 && key5 === "literal") {
                                  rangePropertyTable = rangePropertyTable.substring(0, rangePropertyTable.lastIndexOf('</td> </tr>'))
                                  rangePropertyTable += '<br/><br/>' + key3 + '@' + key4 + '</td> </tr>';
                                } else if (perviousKey1RangeProperty === key1 && perviousKey2RangeProperty === key2) {
                                  rangePropertyTable = rangePropertyTable.substring(0, rangePropertyTable.lastIndexOf('</td> </tr>'))
                                  rangePropertyTable += '<br/><br/>' + key3 + '</td> </tr>';
                                } else if (key4 && key5 === "literal")
                                  rangePropertyTable += '<tr ><td style="vertical-align:middle;">' + key1 + '</td>    <td style="vertical-align:middle; text-align: center;">' + key2 + '</td>   <td>' + key3 + '@' + key4 + '</td> </tr>';
                                else
                                  rangePropertyTable += '<tr><td style="vertical-align:middle;">' + key1 + '</td>    <td style="vertical-align:middle; text-align: center;">' + key2 + '</td>   <td>' + key3 + '</td> </tr>';

                                perviousKey1RangeProperty = key1;
                                perviousKey2RangeProperty = key2;
                              }
                            }
                          }
                          domainPropertyTable += '</tbody></table> ';
                          rangePropertyTable += '</tbody></table> ';
                          // show domainPropertyTable if it has Values
                          if (hasdomainPropertyValues) {
                            $("#domainPropertyTable").show();
                            $("#domainPropertyTable").html(domainPropertyTable);
                          }
                          // show rangePropertyTable if it has Values
                          if (hasRangePropertyValues) {
                            $("#rangePropertyTable").show();
                            $("#rangePropertyTable").html(rangePropertyTable);
                          }
                        }
                      }
                    });
                  };



      //set some of variables to false
      var conceptIsExternal = false;
      var conceptIsSKOS = false;
      var conceptIsOWLIndividual = false;
      // to query sparql endpoint return graph and queryResult
      function getConceptInfo(item, view, anotherQuery) {
        var str = "";
        var isURIExist = false;
        var conceptURI;
        currentSelectedConcept = item;

        // find to which category the term belongs to
        if (isConceptInside(currentSelectedConcept)) {
          if (isSKOSConcept(currentSelectedConcept)) {
            for (var i = 0; i < SKOSData.length; i++) {
              if (item.toLowerCase() === SKOSData[i].concept.toLowerCase()) {
                conceptURI = SKOSData[i].URI;
                isURIExist = true;
                conceptIsSKOS = true;
                break;
              }
            }
          } else {
            for (var i = 0; i < RDFSData.length; i++) {
              if (item.toLowerCase() === RDFSData[i].concept.toLowerCase()) {
                conceptURI = RDFSData[i].URI;
                isURIExist = true;
                break;
              }
            }
          }
        } else if (isOWLIndividiual(currentSelectedConcept)) {
          for (var i = 0; i < individiualsData.length; i++) {
            if (item.toLowerCase() === individiualsData[i].subject.toLowerCase()) {
              conceptURI = individiualsData[i].subjectURI;
              isURIExist = true;
              conceptIsOWLIndividual = true;
              break;
            }
          }
        } else if (!isConceptInside(currentSelectedConcept) && !isOWLIndividiual(currentSelectedConcept)) {
          showExternalInfo(currentSelectedConcept);
          showInstances(currentSelectedConcept);
          isURIExist = false;
          conceptIsExternal = true;
        } else {
          alert("Concept is not found !!");
        }

        if (isURIExist) {
          var endpoint = "./fuseki/dataset/sparql?query="
          if (!anotherQuery)
            var querystring = 'SELECT  ?p ?o WHERE {  <' + conceptURI + '> ?p ?o }'
          else
            var querystring = 'SELECT  ?o ?p WHERE { ?o ?p <' + conceptURI + '> }'
          //  d3sparql.query(endpoint, sparql, render)
          $.ajax({
            type: 'GET',
            url: endpoint + escape(querystring),
            headers: {
              Accept: 'application/sparql-results+json;charset=UTF-8'
            },
            success: function(data, textStatus, jqXHR) {
              if (data)
                render(data);
            }
          });

        }
      }

      // call to run getConceptInfo
      getConceptInfo(currentSelectedConcept);
      var justOneTimeExectuted = false;
      // Function to display data in tables on the page
      function render(json) {
        var dataSPARQL = json.results.bindings;
        if (dataSPARQL) {
          var objectOrSubject = "Object";
          //check for spec case of skos concepts
          if (dataSPARQL.length === 0 && conceptIsSKOS) {
            getConceptInfo(currentSelectedSKOSURI, "SKOS", "queryAsObject");
            showTurtleSource(currentSelectedSKOSURI, "SKOS", "queryAsObject", false);
            justOneTimeExectuted = true;
          } else {
            if (justOneTimeExectuted)
              objectOrSubject = "Subject";
            if (justOneTimeExectuted && objectOrSubject === "Subject")
              justOneTimeExectuted = false;

            // needed local variables
            var conceptHasRange = "";
            var conceptHasDomain = "";
            var conceptLabel;
            var nodes = [],
              edges = [];
            var table = '<table class="ui green celled striped table" style="table-layout:fixed;">' +
              '<colgroup> <col class="col-md-auto"><col class="col-md-7"> </colgroup>' +
              '<tr class="positive">' +
              '<th>Predicate</th>' +
              '<th>' + objectOrSubject + '</th>' +
              '</tr>';
            var rangeTable = '<table class="ui yellow celled striped table" style="table-layout:fixed;" >' +
              '<colgroup> <col class="col-md-6"> </colgroup>' +
              '<tr class="warning">' +
              '<th>Values expected to be one of these types</th>' +
              '</tr>';
            var domainTable = '<table class="ui brown celled striped table" style="table-layout:fixed;">' +
              '<colgroup> <col class="col-md-6"> </colgroup>' +
              '<tr class="negative">' +
              '<th>Used on these types</th>' +
              '</tr>';

            for (var i = 0; i < dataSPARQL.length; i++) {
              var key1 = trimHash(replaceWithRDFType(trimSlash(dataSPARQL[i]['p'].value)));
              var key2 = dataSPARQL[i]['o'].value;
              var key2URI = key2;
              var key3 = "";
              if (dataSPARQL[i]['o'].hasOwnProperty("xml:lang"))
                key3 = dataSPARQL[i]['o']['xml:lang'];
              var key4 = dataSPARQL[i]['o']['type'];

              if ((key2.includes("http://") || key2.includes("https://")) && key4 === "literal") {
                if (key2[key2.length - 1] === ('/'))
                  key2 = key2.slice(0, -1);
                key2 = '<a href=' + key2URI + '>' + key2 + '</a>';
              } else {
                if (key2[key2.length - 1] === ('/'))
                  key2 = key2.slice(0, -1);
                key2 = trimHash(replaceWithRDFType(trimSlash(key2)));
              }
              // create an array with nodes for graph visualization
              if (key3) {
                nodes.push({
                  id: i + 2,
                  label: key2 + "@" + key3
                });
              } else {
                nodes.push({
                  id: i + 2,
                  label: key2
                });
              }
              // create an array with edges for graph visualization
              edges.push({
                from: 1,
                to: i + 2,
                label: key1,
                font: {
                  color: 'green'
                }
              });
              //
              if (key1.includes("domain")) {
                conceptHasDomain = key1;
                if (isConceptInside(key2) && key4 === "uri")
                  key2 = '<a href="./' + key2 + '">' + key2 + '</a>';
                else if (!isConceptInside(key2) && !isOWLIndividiual(key2) && key4 === "uri")
                  //    else
                  key2 = '<a href="./' + key2 + '">' + key2 + '</a>';
                domainTable += '<tr>    <td>' + key2 + '</td>  </tr>';
              } else if (key1.includes("range")) {
                conceptHasRange = key1;
                if (isConceptInside(key2) && key4 === "uri")
                  key2 = '<a href="./' + key2 + '">' + key2 + '</a>';
                else if (!isConceptInside(key2) && !isOWLIndividiual(key2) && key4 === "uri")
                  key2 = '<a href="./' + key2 + '">' + key2 + '</a>';
                rangeTable += '<tr>    <td>' + key2 + '</td>  </tr>';
              } else {
                if (key1.includes("broader") || key1.includes("narrower")) {
                  key2 = '<a href=./' + key2 + '>' + key2 + '</a>';
                }
                else if (isOWLIndividiual(key2) && !key1.includes("label") && key4 === "uri") {
                  key2 = '<a href="./' + key2 + '">' + key2 + '</a>';

                }
                else if (!isConceptInside(key2) && !isOWLIndividiual(key2) && !key1.includes("label") && key4 === "uri") {
                  key2 = '<a href="./' + key2 + '">' + key2 + '</a>';
                }
                if (isConceptInside(key2) && !key1.includes("label") && key4 === "uri") {
                  key2 = '<a href="./' + key2 + '">' + key2 + '</a>';
                }
                if (key3 && key4 === "literal") {
                  key2 = key2 + '@' + key3;
                }
              }
              table += '<tr><td>' + key1 + '</td>    <td>' + key2 + '</td>  </tr>';
            }
          }
          // close HTML tables with thier tags
          table += '</table> ';
          domainTable += '</table> ';
          rangeTable += '</table> ';

          $('#infoTabs').show();
          $("#infoTabs").animate({
            scrollTop: 0
          }, "fast");

          //display returned data on the Html tables
          $("#conceptHead").show();
          if (currentSelectedConcept.includes("http://") || currentSelectedConcept.includes("https://")) { //check if it skosURI
            currentSelectedConcept = trimHash(trimSlash(currentSelectedConcept));
          }
          nodes.push({
            id: 1,
            label: currentSelectedConcept,
            font: {
              size: 20,
              color: 'red',
              face: 'sans'
            },
            color: '#e9d4df'
          });

          $("#conceptHead ").html('<p >  Details: <code>' + currentSelectedConcept + '</code></p>');
          $("#infoDetails").show();
          $('#viewList').show();
          // domainTable has some values to show
          if (!conceptHasDomain == "")
            $("#domainTable").show();
          else
            $("#domainTable").hide();
          // rangeTable has some values to show
          if (!conceptHasRange == "")
            $("#rangeTable").show();
          else {
            $("#rangeTable").hide();
          }
          $("#detailTable").html(table);
          $("#domainTable").html(domainTable);
          $("#rangeTable").html(rangeTable);

          var dataToBeChecked = [];
          if (conceptIsOWLIndividual) {
            // make both rangePropertyTable and domainPropertyTable  empty
            $("#rangePropertyTable").hide();
            $("#domainPropertyTable").hide();
          } else if (conceptIsSKOS) {
            dataToBeChecked = SKOSData;
          } else {
            dataToBeChecked = RDFSData;
          }

          if (!conceptIsOWLIndividual) {
            // make both rangePropertyTable and domainPropertyTable  empty
            $("#rangePropertyTable").hide();
            $("#domainPropertyTable").hide();
            // get currentSelectedURI for domainPropertyTable and rangePropertyTable
            var conceptURI = _.find(dataToBeChecked, function(o) {
              if (o.concept === currentSelectedConcept)
                return o;
            }).URI;
            // check if other concepts use this word as domain
            getValuesUseditAsProperty(conceptURI, 'domain');
            // check if other concepts use this word as range
            getValuesUseditAsProperty(conceptURI, 'range');
            showInstances(currentSelectedConcept);
          }
          $("#sourceCodeTab").show();
          $('#graphTab').show();

          // create a network
          var container = document.getElementById('mynetwork');
          var data = {
            nodes: nodes,
            edges: edges
          };
          var options = {
            autoResize: true,
            width: '1100px',
            height: '400px',
            interaction: {
              navigationButtons: true,
              keyboard: true
            },
            nodes: {
              shape: 'dot',
              size: 20
            },
            physics: {
              enabled: true,
              barnesHut: {
                gravitationalConstant: -2000,
                centralGravity: 0.3,
                springLength: 95,
                springConstant: 0.04,
                damping: 0.09,
                avoidOverlap: 0
              },
              forceAtlas2Based: {
                gravitationalConstant: -50,
                centralGravity: 0.01,
                springConstant: 0.08,
                springLength: 100,
                damping: 0.4,
                avoidOverlap: 0
              },
              repulsion: {
                centralGravity: 0.2,
                springLength: 200,
                springConstant: 0.05,
                nodeDistance: 100,
                damping: 0.09
              },
              hierarchicalRepulsion: {
                centralGravity: 0.0,
                springLength: 100,
                springConstant: 0.01,
                nodeDistance: 120,
                damping: 0.09
              },
              maxVelocity: 50,
              minVelocity: 0.1,
              solver: 'barnesHut',
              stabilization: {
                enabled: true,
                iterations: 1000,
                updateInterval: 100,
                onlyDynamicEdges: false,
                fit: true
              },
              timestep: 0.5,
              adaptiveTimestep: true
            }
          };
          var network = new vis.Network(container, data, options);
          var fitNetworkFirstTime = false;
          // add event listeners
          network.on('select', function(params) {
            document.getElementById('selection').innerHTML = 'Selection: ' + params.nodes;
          });

          network.on('afterDrawing', function() {
            if (!fitNetworkFirstTime)
              network.fit();
            fitNetworkFirstTime = true;
          });

          // To render oncemore the graph id the graphTab is clicked
          $('#graphTab').on('click', function() {
            network = new vis.Network(container, data, options);
            network.on('afterDrawing', function() {
              if (!fitNetworkFirstTime)
                network.fit();
              fitNetworkFirstTime = true;
            });
          });
          // To reset fitNetworkFirstTime when user click other than graphTab
          $('#documentationTab').on('click', function() {
              fitNetworkFirstTime = false;
          });
          $('#sourceCodeTab').on('click', function() {
              fitNetworkFirstTime = false;
          });

        }
      }


      $(document).ready(function(e) {
        $(document).on('click', 'a[href="#"]', function(e) {
          e.preventDefault();
        });
      });
    </script>
    <!-- End of JavaScript coding-->
